/*
 * generated by Xtext 2.10.0
 */
package net.technearts.jvmmodel

import com.google.inject.Inject
import net.technearts.timor.ClassDeclaration
import net.technearts.timor.File
import net.technearts.timor.MethodDeclaration
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

/**
 * <p>Infers a JVM model from the source model.</p> 
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class TimorJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder
	@Inject extension IQualifiedNameProvider

	def dispatch void infer(File file, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		for (declaration : file.declarations) {
			switch declaration {
				ClassDeclaration: {
					acceptor.accept(declaration.toClass(declaration.fullyQualifiedName)) [
						documentation = declaration.documentation
						if (declaration.extend != null && declaration.extend.size > 0) {
							// TODO est√° pegando o primeiro elemento como classe
							superTypes += declaration.extend.get(0).cloneWithProxies
						}
						for (property : declaration.properties) {
							members += property.toField(property.name, property.type)
							members += property.toSetter(property.name, property.type)
							members += property.toGetter(property.name, property.type)
						}
					]
				}
				MethodDeclaration: {
					acceptor.accept(declaration.target.toClass(declaration.fullyQualifiedName)) [
					members += declaration.toMethod(declaration.name, declaration.type) [
              		documentation = feature.documentation
              		for (p : feature.params) {
                		parameters += p.toParameter(p.name, p.parameterType)
              		}
              		body = feature.body
              		
              		]
				}
			}

		}

	}
}
