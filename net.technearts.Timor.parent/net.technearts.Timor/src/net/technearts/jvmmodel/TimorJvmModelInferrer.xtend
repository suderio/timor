/*
 * generated by Xtext 2.10.0
 */
package net.technearts.jvmmodel

import com.google.inject.Inject
import net.technearts.timor.ClassDeclaration
import net.technearts.timor.File
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class TimorJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder
	@Inject extension IQualifiedNameProvider

		def dispatch void infer(File file, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		System.out.println("-------------------1" + file.fullyQualifiedName)
		for (klazz : file.declarations) {
			System.out.println("-------------------2" + klazz.toString)
			if (klazz instanceof ClassDeclaration) {
				System.out.println("-------------------3")
				acceptor.accept(klazz.toClass(klazz.fullyQualifiedName)) [
					System.out.println("-------------------4")
					documentation = klazz.documentation
					if (klazz.extend != null)
						// TODO est√° pegando o primeiro elemento como classe
						superTypes += klazz.extend.get(0).cloneWithProxies
					for (property : klazz.properties) {
						members += property.toField(property.name, property.type)
						members += property.toSetter(property.name, property.type)
						members += property.toGetter(property.name, property.type)
					}
				]

			}

		}
	}
}
