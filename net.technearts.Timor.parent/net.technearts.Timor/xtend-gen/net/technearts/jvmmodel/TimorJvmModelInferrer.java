/**
 * generated by Xtext 2.10.0
 */
package net.technearts.jvmmodel;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import net.technearts.timor.ClassDeclaration;
import net.technearts.timor.File;
import net.technearts.timor.Property;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class TimorJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  protected void _infer(final File file, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(file);
    String _plus = ("-------------------1" + _fullyQualifiedName);
    System.out.println(_plus);
    EList<EObject> _declarations = file.getDeclarations();
    for (final EObject klazz : _declarations) {
      {
        String _string = klazz.toString();
        String _plus_1 = ("-------------------2" + _string);
        System.out.println(_plus_1);
        if ((klazz instanceof ClassDeclaration)) {
          System.out.println("-------------------3");
          QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(klazz);
          JvmGenericType _class = this._jvmTypesBuilder.toClass(klazz, _fullyQualifiedName_1);
          final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
            System.out.println("-------------------4");
            String _documentation = this._jvmTypesBuilder.getDocumentation(klazz);
            this._jvmTypesBuilder.setDocumentation(it, _documentation);
            EList<JvmTypeReference> _extend = ((ClassDeclaration)klazz).getExtend();
            boolean _notEquals = (!Objects.equal(_extend, null));
            if (_notEquals) {
              EList<JvmTypeReference> _superTypes = it.getSuperTypes();
              EList<JvmTypeReference> _extend_1 = ((ClassDeclaration)klazz).getExtend();
              JvmTypeReference _get = _extend_1.get(0);
              JvmTypeReference _cloneWithProxies = this._jvmTypesBuilder.cloneWithProxies(_get);
              this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _cloneWithProxies);
            }
            EList<Property> _properties = ((ClassDeclaration)klazz).getProperties();
            for (final Property property : _properties) {
              {
                EList<JvmMember> _members = it.getMembers();
                String _name = property.getName();
                JvmTypeReference _type = property.getType();
                JvmField _field = this._jvmTypesBuilder.toField(property, _name, _type);
                this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
                EList<JvmMember> _members_1 = it.getMembers();
                String _name_1 = property.getName();
                JvmTypeReference _type_1 = property.getType();
                JvmOperation _setter = this._jvmTypesBuilder.toSetter(property, _name_1, _type_1);
                this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _setter);
                EList<JvmMember> _members_2 = it.getMembers();
                String _name_2 = property.getName();
                JvmTypeReference _type_2 = property.getType();
                JvmOperation _getter = this._jvmTypesBuilder.toGetter(property, _name_2, _type_2);
                this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _getter);
              }
            }
          };
          acceptor.<JvmGenericType>accept(_class, _function);
        }
      }
    }
  }
  
  public void infer(final EObject file, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (file instanceof File) {
      _infer((File)file, acceptor, isPreIndexingPhase);
      return;
    } else if (file != null) {
      _infer(file, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(file, acceptor, isPreIndexingPhase).toString());
    }
  }
}
